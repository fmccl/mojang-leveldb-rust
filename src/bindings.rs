/* automatically generated by rust-bindgen 0.69.4 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_cache_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_comparator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_env_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_filelock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_filterpolicy_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_iterator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_logger_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_randomfile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_readoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_seqfile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_snapshot_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_writablefile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_writebatch_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct leveldb_writeoptions_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn leveldb_open(
        options: *const leveldb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut leveldb_t;
}
extern "C" {
    pub fn leveldb_close(db: *mut leveldb_t);
}
extern "C" {
    pub fn leveldb_put(
        db: *mut leveldb_t,
        options: *const leveldb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        val: *const ::std::os::raw::c_char,
        vallen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn leveldb_delete(
        db: *mut leveldb_t,
        options: *const leveldb_writeoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn leveldb_write(
        db: *mut leveldb_t,
        options: *const leveldb_writeoptions_t,
        batch: *mut leveldb_writebatch_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn leveldb_get(
        db: *mut leveldb_t,
        options: *const leveldb_readoptions_t,
        key: *const ::std::os::raw::c_char,
        keylen: usize,
        vallen: *mut usize,
        errptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn leveldb_create_iterator(
        db: *mut leveldb_t,
        options: *const leveldb_readoptions_t,
    ) -> *mut leveldb_iterator_t;
}
extern "C" {
    pub fn leveldb_create_snapshot(db: *mut leveldb_t) -> *const leveldb_snapshot_t;
}
extern "C" {
    pub fn leveldb_release_snapshot(db: *mut leveldb_t, snapshot: *const leveldb_snapshot_t);
}
extern "C" {
    pub fn leveldb_property_value(
        db: *mut leveldb_t,
        propname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn leveldb_approximate_sizes(
        db: *mut leveldb_t,
        num_ranges: ::std::os::raw::c_int,
        range_start_key: *const *const ::std::os::raw::c_char,
        range_start_key_len: *const usize,
        range_limit_key: *const *const ::std::os::raw::c_char,
        range_limit_key_len: *const usize,
        sizes: *mut u64,
    );
}
extern "C" {
    pub fn leveldb_compact_range(
        db: *mut leveldb_t,
        start_key: *const ::std::os::raw::c_char,
        start_key_len: usize,
        limit_key: *const ::std::os::raw::c_char,
        limit_key_len: usize,
    );
}
extern "C" {
    pub fn leveldb_destroy_db(
        options: *const leveldb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn leveldb_repair_db(
        options: *const leveldb_options_t,
        name: *const ::std::os::raw::c_char,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn leveldb_iter_destroy(arg1: *mut leveldb_iterator_t);
}
extern "C" {
    pub fn leveldb_iter_valid(arg1: *const leveldb_iterator_t) -> u8;
}
extern "C" {
    pub fn leveldb_iter_seek_to_first(arg1: *mut leveldb_iterator_t);
}
extern "C" {
    pub fn leveldb_iter_seek_to_last(arg1: *mut leveldb_iterator_t);
}
extern "C" {
    pub fn leveldb_iter_seek(
        arg1: *mut leveldb_iterator_t,
        k: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn leveldb_iter_next(arg1: *mut leveldb_iterator_t);
}
extern "C" {
    pub fn leveldb_iter_prev(arg1: *mut leveldb_iterator_t);
}
extern "C" {
    pub fn leveldb_iter_key(
        arg1: *const leveldb_iterator_t,
        klen: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn leveldb_iter_value(
        arg1: *const leveldb_iterator_t,
        vlen: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn leveldb_iter_get_error(
        arg1: *const leveldb_iterator_t,
        errptr: *mut *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn leveldb_writebatch_create() -> *mut leveldb_writebatch_t;
}
extern "C" {
    pub fn leveldb_writebatch_destroy(arg1: *mut leveldb_writebatch_t);
}
extern "C" {
    pub fn leveldb_writebatch_clear(arg1: *mut leveldb_writebatch_t);
}
extern "C" {
    pub fn leveldb_writebatch_put(
        arg1: *mut leveldb_writebatch_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
        val: *const ::std::os::raw::c_char,
        vlen: usize,
    );
}
extern "C" {
    pub fn leveldb_writebatch_delete(
        arg1: *mut leveldb_writebatch_t,
        key: *const ::std::os::raw::c_char,
        klen: usize,
    );
}
extern "C" {
    pub fn leveldb_writebatch_iterate(
        arg1: *const leveldb_writebatch_t,
        state: *mut ::std::os::raw::c_void,
        put: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                k: *const ::std::os::raw::c_char,
                klen: usize,
                v: *const ::std::os::raw::c_char,
                vlen: usize,
            ),
        >,
        deleted: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                k: *const ::std::os::raw::c_char,
                klen: usize,
            ),
        >,
    );
}
extern "C" {
    pub fn leveldb_writebatch_append(
        destination: *mut leveldb_writebatch_t,
        source: *const leveldb_writebatch_t,
    );
}
extern "C" {
    pub fn leveldb_options_create() -> *mut leveldb_options_t;
}
extern "C" {
    pub fn leveldb_options_destroy(arg1: *mut leveldb_options_t);
}
extern "C" {
    pub fn leveldb_options_set_comparator(
        arg1: *mut leveldb_options_t,
        arg2: *mut leveldb_comparator_t,
    );
}
extern "C" {
    pub fn leveldb_options_set_filter_policy(
        arg1: *mut leveldb_options_t,
        arg2: *mut leveldb_filterpolicy_t,
    );
}
extern "C" {
    pub fn leveldb_options_set_create_if_missing(arg1: *mut leveldb_options_t, arg2: u8);
}
extern "C" {
    pub fn leveldb_options_set_error_if_exists(arg1: *mut leveldb_options_t, arg2: u8);
}
extern "C" {
    pub fn leveldb_options_set_paranoid_checks(arg1: *mut leveldb_options_t, arg2: u8);
}
extern "C" {
    pub fn leveldb_options_set_env(arg1: *mut leveldb_options_t, arg2: *mut leveldb_env_t);
}
extern "C" {
    pub fn leveldb_options_set_info_log(arg1: *mut leveldb_options_t, arg2: *mut leveldb_logger_t);
}
extern "C" {
    pub fn leveldb_options_set_write_buffer_size(arg1: *mut leveldb_options_t, arg2: usize);
}
extern "C" {
    pub fn leveldb_options_set_max_open_files(
        arg1: *mut leveldb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn leveldb_options_set_cache(arg1: *mut leveldb_options_t, arg2: *mut leveldb_cache_t);
}
extern "C" {
    pub fn leveldb_options_set_block_size(arg1: *mut leveldb_options_t, arg2: usize);
}
extern "C" {
    pub fn leveldb_options_set_block_restart_interval(
        arg1: *mut leveldb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn leveldb_options_set_max_file_size(arg1: *mut leveldb_options_t, arg2: usize);
}
pub const leveldb_no_compression: _bindgen_ty_1 = 0;
pub const leveldb_snappy_compression: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn leveldb_options_set_compression(
        arg1: *mut leveldb_options_t,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn leveldb_comparator_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                a: *const ::std::os::raw::c_char,
                alen: usize,
                b: *const ::std::os::raw::c_char,
                blen: usize,
            ) -> ::std::os::raw::c_int,
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut leveldb_comparator_t;
}
extern "C" {
    pub fn leveldb_comparator_destroy(arg1: *mut leveldb_comparator_t);
}
extern "C" {
    pub fn leveldb_filterpolicy_create(
        state: *mut ::std::os::raw::c_void,
        destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        create_filter: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key_array: *const *const ::std::os::raw::c_char,
                key_length_array: *const usize,
                num_keys: ::std::os::raw::c_int,
                filter_length: *mut usize,
            ) -> *mut ::std::os::raw::c_char,
        >,
        key_may_match: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                key: *const ::std::os::raw::c_char,
                length: usize,
                filter: *const ::std::os::raw::c_char,
                filter_length: usize,
            ) -> u8,
        >,
        name: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
            ) -> *const ::std::os::raw::c_char,
        >,
    ) -> *mut leveldb_filterpolicy_t;
}
extern "C" {
    pub fn leveldb_filterpolicy_destroy(arg1: *mut leveldb_filterpolicy_t);
}
extern "C" {
    pub fn leveldb_filterpolicy_create_bloom(
        bits_per_key: ::std::os::raw::c_int,
    ) -> *mut leveldb_filterpolicy_t;
}
extern "C" {
    pub fn leveldb_readoptions_create() -> *mut leveldb_readoptions_t;
}
extern "C" {
    pub fn leveldb_readoptions_destroy(arg1: *mut leveldb_readoptions_t);
}
extern "C" {
    pub fn leveldb_readoptions_set_verify_checksums(arg1: *mut leveldb_readoptions_t, arg2: u8);
}
extern "C" {
    pub fn leveldb_readoptions_set_fill_cache(arg1: *mut leveldb_readoptions_t, arg2: u8);
}
extern "C" {
    pub fn leveldb_readoptions_set_snapshot(
        arg1: *mut leveldb_readoptions_t,
        arg2: *const leveldb_snapshot_t,
    );
}
extern "C" {
    pub fn leveldb_writeoptions_create() -> *mut leveldb_writeoptions_t;
}
extern "C" {
    pub fn leveldb_writeoptions_destroy(arg1: *mut leveldb_writeoptions_t);
}
extern "C" {
    pub fn leveldb_writeoptions_set_sync(arg1: *mut leveldb_writeoptions_t, arg2: u8);
}
extern "C" {
    pub fn leveldb_cache_create_lru(capacity: usize) -> *mut leveldb_cache_t;
}
extern "C" {
    pub fn leveldb_cache_destroy(cache: *mut leveldb_cache_t);
}
extern "C" {
    pub fn leveldb_create_default_env() -> *mut leveldb_env_t;
}
extern "C" {
    pub fn leveldb_env_destroy(arg1: *mut leveldb_env_t);
}
extern "C" {
    pub fn leveldb_env_get_test_directory(arg1: *mut leveldb_env_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn leveldb_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn leveldb_major_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn leveldb_minor_version() -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
